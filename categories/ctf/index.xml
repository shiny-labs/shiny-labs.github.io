<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTF on shiny-labs</title>
    <link>https://shiny-labs.re/categories/ctf/</link>
    <description>Recent content in CTF on shiny-labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>shiny-labs@kylma.fr (shiny-labs)</managingEditor>
    <webMaster>shiny-labs@kylma.fr (shiny-labs)</webMaster>
    <lastBuildDate>Sun, 17 May 2020 21:56:41 +0200</lastBuildDate>
    
	<atom:link href="https://shiny-labs.re/categories/ctf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PicoCTF 2019 - Seed sPRiNG</title>
      <link>https://shiny-labs.re/posts/200517-picoctf-2019-seed-spring/</link>
      <pubDate>Sun, 17 May 2020 21:56:41 +0200</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/200517-picoctf-2019-seed-spring/</guid>
      <description>Description  The most revolutionary game is finally available: seed sPRiNG is open right now! seed_spring. Connect to it with nc 2019shell1.picoctf.com 45107.
 Hints:
 How is that program deciding what the height is? You and the program should sync up!  Solution $ file seed_spring seed_spring: ELF 32-bit LSB pie executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=24cf2e205931e9f950290de2fac6cff03e58e3df, not stripped Okay, test run tiiiiime:</description>
    </item>
    
    <item>
      <title>PicoCTF 2019 - Stringzz</title>
      <link>https://shiny-labs.re/posts/200229-picoctf-stringzz/</link>
      <pubDate>Sun, 29 Mar 2020 22:13:58 +0200</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/200229-picoctf-stringzz/</guid>
      <description>Description  Use a format string to pwn this program and get a flag. Its also found in /problems/stringzz_6_5f0e31bfd7b9a7c6a32d22b6d57e9010 on the shell server. Source.
 Hint: http://www.cis.syr.edu/~wedu/Teaching/cis643/LectureNotes_New/Format_String.pdf
Solution Let&amp;rsquo;s check the source code first:
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt; #define FLAG_BUFFER 128 #define LINE_BUFFER_SIZE 2000  void printMessage3(char *in) { puts(&amp;#34;will be printed:\n&amp;#34;); printf(in); } void printMessage2(char *in) { puts(&amp;#34;your input &amp;#34;); printMessage3(in); } void printMessage1(char *in) { puts(&amp;#34;Now &amp;#34;); printMessage2(in); } int main (int argc, char **argv) { puts(&amp;#34;input whatever string you want; then it will be printed back:\n&amp;#34;); int read; unsigned int len; char *input = NULL; getline(&amp;amp;input, &amp;amp;len, stdin); //There is no win function, but the flag is wandering in the memory!</description>
    </item>
    
    <item>
      <title>OverTheWire - Bandit Levels 10 to 19</title>
      <link>https://shiny-labs.re/posts/200315-overthewire-bandit-09-19/</link>
      <pubDate>Sun, 15 Mar 2020 11:17:31 +0100</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/200315-overthewire-bandit-09-19/</guid>
      <description>Bandit Level 10 → Level 11 Level Goal The password for the next level is stored in the file data.txt, which contains base64 encoded data
Commands you may need to solve this level grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd
Helpful Reading Material  Base64 on Wikipedia  Solution So the password is encoded using base64? Let&amp;rsquo;s checkout the command with the same name ~~
bandit10@bandit:~$ cat data.</description>
    </item>
    
    <item>
      <title>OverTheWire - Bandit Levels 00 to 09</title>
      <link>https://shiny-labs.re/posts/200315-overthewire-bandit-00-09/</link>
      <pubDate>Sun, 15 Mar 2020 11:08:54 +0100</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/200315-overthewire-bandit-00-09/</guid>
      <description>This week-end, I tried https://overthewire.org/wargames/bandit/ which is aimed at absolute beginners and teach the basics.
Bandit Level 0 Level Goal The goal of this level is for you to log into the game using SSH. The host to which you need to connect is bandit.labs.overthewire.org, on port 2220. The username is bandit0 and the password is bandit0. Once logged in, go to the Level 1 page to find out how to beat Level 1.</description>
    </item>
    
    <item>
      <title>24/7 CTF - The Secret Lock</title>
      <link>https://shiny-labs.re/posts/200229-247ctf-the-secret-lock/</link>
      <pubDate>Sat, 29 Feb 2020 21:44:37 +0100</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/200229-247ctf-the-secret-lock/</guid>
      <description>Description  Can you reverse the secret combination to open the lock and recover the flag?
 Solution The archive contains only one file named The Secret Lock.html&amp;hellip; Oh dear, a web page! Where&amp;rsquo;s my binary? :(((
On the HTML page, we are greeted by a impressive lock with a blinking &amp;ldquo;locked&amp;rdquo; message.
That&amp;rsquo;s some hardcore combination lock. Hope you don&amp;rsquo;t have one of those on your luggage&amp;hellip;
class Lock { constructor() { this.</description>
    </item>
    
    <item>
      <title>PicoCTF 2019 - General Skills</title>
      <link>https://shiny-labs.re/posts/200223-picoctf-general-skills/</link>
      <pubDate>Sun, 23 Feb 2020 09:15:49 +0100</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/200223-picoctf-general-skills/</guid>
      <description>Let&amp;rsquo;s Warm Up [50] Description  If I told you a word started with 0x70 in hexadecimal, what would it start with in ASCII?
 Solution A look at the ASCII manual should help!
$ man ascii Then, it&amp;rsquo;s just a matter of finding the right line, the one that has 70 in the Hex column.
Oct Dec Hex Char Oct Dec Hex Char ──────────────────────────────────────────────────────────────────────── [...] 060 48 30 0 160 112 70 p Flag: picoCTF{p}</description>
    </item>
    
    <item>
      <title>24/7 CTF - The More The Merrier</title>
      <link>https://shiny-labs.re/posts/200212-247ctf-the-more-the-merrier/</link>
      <pubDate>Wed, 12 Feb 2020 20:49:07 +0100</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/200212-247ctf-the-more-the-merrier/</guid>
      <description>Description  One byte is great. But what if you need more? Can you find the flag hidden in this binary?
 Solution $ file the_more_the_merrier the_more_the_merrier: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 3.2.0, BuildID[sha1]=0f750d638337391328fa7432dd362189de908c1e, stripped $ ./the_more_the_merrier Nothing to see here.. Wow wow, calm down, I can&amp;rsquo;t follow with all the output! So&amp;hellip; Running the binary isn&amp;rsquo;t quite the definition of excitement&amp;hellip;</description>
    </item>
    
    <item>
      <title>Infosec Institute - n00bs CTF Labs Writeup</title>
      <link>https://shiny-labs.re/posts/200201-infosecinstitute-n00bs-ctf-writeup/</link>
      <pubDate>Sat, 01 Feb 2020 14:42:01 +0100</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/200201-infosecinstitute-n00bs-ctf-writeup/</guid>
      <description>_____ _____ _ _____ ___________ _ _ | _ || _ | | / __ \_ _| ___| | | | | _ __ | |/&amp;#39; || |/&amp;#39; | |__ ___ | / \/ | | | |_ | | __ _| |__ ___ | &amp;#39;_ \| /| || /| | &amp;#39;_ \/ __| | | | | | _| | | / _` | &amp;#39;_ \/ __| | | | \ |_/ /\ |_/ / |_) \__ \ | \__/\ | | | | | |___| (_| | |_) \__ \ |_| |_|\___/ \___/|_.</description>
    </item>
    
  </channel>
</rss>