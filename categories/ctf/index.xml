<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTF on shiny-labs</title>
    <link>https://shiny-labs.re/categories/ctf/</link>
    <description>Recent content in CTF on shiny-labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>shiny-labs@kylma.fr (shiny-labs)</managingEditor>
    <webMaster>shiny-labs@kylma.fr (shiny-labs)</webMaster>
    <lastBuildDate>Thu, 14 Jan 2021 19:56:49 +0100</lastBuildDate><atom:link href="https://shiny-labs.re/categories/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KringleCon 3 - Holiday Hack Challenge 2020</title>
      <link>https://shiny-labs.re/posts/210114-kringlecon-3-hhc-2020/</link>
      <pubDate>Thu, 14 Jan 2021 19:56:49 +0100</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/210114-kringlecon-3-hhc-2020/</guid>
      <description>Here&amp;rsquo;s my writeup for the 2020 SANS Holiday Hack challenge: &amp;lsquo;Zat You, Santa Claus? featuring KringleCon 3: French Hens.
This year, the event has moved to Santa&amp;rsquo;s newly renovated castle at the North Pole!
The goal is to solve the 11 objectives (well, 12 since the last objective has two parts) and save Christmas, of course. Along the way, terminals and mini-challenges can provide hints if you help the elf fix his troubles.</description>
    </item>
    
    <item>
      <title>PicoCTF 2019 - L1im1tL355</title>
      <link>https://shiny-labs.re/posts/2020/200819-picoctf-l1im1tl355/</link>
      <pubDate>Wed, 19 Aug 2020 18:41:01 +0200</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/2020/200819-picoctf-l1im1tl355/</guid>
      <description>Description  Just pwn this program and get a flag. Its also found in /problems/l1im1tl355_4_b2111fe5737c985221bac06a80d6d6c7 on the shell server. Source.
 Hint: An unbounded index can point anywhere!
Solution Okay, what does that binary do?
$ ./vuln Input the integer value you want to put in the array 1 Input the index in which you want to put the value 1 Mokay, pretty straight forward, we give a value and it&amp;rsquo;s put in array[index].</description>
    </item>
    
    <item>
      <title>PicoCTF 2019 - Leap Frog</title>
      <link>https://shiny-labs.re/posts/2020/200629-picoctf-2019-leap-frog/</link>
      <pubDate>Mon, 29 Jun 2020 21:05:40 +0200</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/2020/200629-picoctf-2019-leap-frog/</guid>
      <description>Description  Can you jump your way to win in the following program and get the flag? You can find the program in /problems/leap-frog_4_32907c7b6e253bd5d9422083e7243619 on the shell server? Source.
  Try and call the functions in the correct order! Remember, you can always call main() again!  Solution Let&amp;rsquo;s first have a look at the source code:
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;stdbool.h&amp;gt; #define FLAG_SIZE 64  bool win1 = false; bool win2 = false; bool win3 = false; void leapA() { win1 = true; } void leap2(unsigned int arg_check) { if (win3 &amp;amp;&amp;amp; arg_check == 0xDEADBEEF) { win2 = true; } else if (win3) { printf(&amp;#34;Wrong Argument.</description>
    </item>
    
    <item>
      <title>PicoCTF 2019 - rop32</title>
      <link>https://shiny-labs.re/posts/2020/200617-picoctf-2019-rop32/</link>
      <pubDate>Wed, 17 Jun 2020 23:44:45 +0200</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/2020/200617-picoctf-2019-rop32/</guid>
      <description>Description  Can you exploit the following program to get a flag? You can find the program in /problems/rop32_0_b4142d4df31cb73e170c77dac234a79a on the shell server. Source.
 Hint: This is a classic ROP to get a shell
Solution Let&amp;rsquo;s start with the source code:
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt; #define BUFSIZE 16  void vuln() { char buf[16]; printf(&amp;#34;Can you ROP your way out of this?\n&amp;#34;); return gets(buf); } int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid  // this prevents /bin/sh from dropping the privileges  gid_t gid = getegid(); setresgid(gid, gid, gid); vuln(); } The vulnerability here is due to the usage of the gets() function.</description>
    </item>
    
    <item>
      <title>PicoCTF 2019 - Empire 1</title>
      <link>https://shiny-labs.re/posts/2020/200607-picoctf-2019-empire-1/</link>
      <pubDate>Sun, 07 Jun 2020 12:40:07 +0200</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/2020/200607-picoctf-2019-empire-1/</guid>
      <description>Description  Psst, Agent 513, now that you&amp;rsquo;re an employee of Evil Empire Co., try to get their secrets off the company website. https://2019shell1.picoctf.com/problem/12234/ (link) Can you first find the secret code they assigned to you? or http://2019shell1.picoctf.com:12234
 Hints:
 Pay attention to the feedback you get There is very limited filtering in place - this to stop you from breaking the challenge for yourself, not for you to bypass.</description>
    </item>
    
    <item>
      <title>PicoCTF 2019 - Seed sPRiNG</title>
      <link>https://shiny-labs.re/posts/2020/200517-picoctf-2019-seed-spring/</link>
      <pubDate>Sun, 17 May 2020 21:56:41 +0200</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/2020/200517-picoctf-2019-seed-spring/</guid>
      <description>Description  The most revolutionary game is finally available: seed sPRiNG is open right now! seed_spring. Connect to it with nc 2019shell1.picoctf.com 45107.
 Hints:
 How is that program deciding what the height is? You and the program should sync up!  Solution $ file seed_spring seed_spring: ELF 32-bit LSB pie executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=24cf2e205931e9f950290de2fac6cff03e58e3df, not stripped Okay, test run tiiiiime:</description>
    </item>
    
    <item>
      <title>PicoCTF 2019 - Stringzz</title>
      <link>https://shiny-labs.re/posts/2020/200229-picoctf-stringzz/</link>
      <pubDate>Sun, 29 Mar 2020 22:13:58 +0200</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/2020/200229-picoctf-stringzz/</guid>
      <description>Description  Use a format string to pwn this program and get a flag. Its also found in /problems/stringzz_6_5f0e31bfd7b9a7c6a32d22b6d57e9010 on the shell server. Source.
 Hint: http://www.cis.syr.edu/~wedu/Teaching/cis643/LectureNotes_New/Format_String.pdf
Solution Let&amp;rsquo;s check the source code first:
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt; #define FLAG_BUFFER 128 #define LINE_BUFFER_SIZE 2000  void printMessage3(char *in) { puts(&amp;#34;will be printed:\n&amp;#34;); printf(in); } void printMessage2(char *in) { puts(&amp;#34;your input &amp;#34;); printMessage3(in); } void printMessage1(char *in) { puts(&amp;#34;Now &amp;#34;); printMessage2(in); } int main (int argc, char **argv) { puts(&amp;#34;input whatever string you want; then it will be printed back:\n&amp;#34;); int read; unsigned int len; char *input = NULL; getline(&amp;amp;input, &amp;amp;len, stdin); //There is no win function, but the flag is wandering in the memory!</description>
    </item>
    
    <item>
      <title>OverTheWire - Bandit Levels 10 to 19</title>
      <link>https://shiny-labs.re/posts/2020/200315-overthewire-bandit-09-19/</link>
      <pubDate>Sun, 15 Mar 2020 11:17:31 +0100</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/2020/200315-overthewire-bandit-09-19/</guid>
      <description>Bandit Level 10 â†’ Level 11 Level Goal The password for the next level is stored in the file data.txt, which contains base64 encoded data
Commands you may need to solve this level grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd
Helpful Reading Material  Base64 on Wikipedia  Solution So the password is encoded using base64? Let&amp;rsquo;s checkout the command with the same name ~~
bandit10@bandit:~$ cat data.</description>
    </item>
    
    <item>
      <title>OverTheWire - Bandit Levels 00 to 09</title>
      <link>https://shiny-labs.re/posts/2020/200315-overthewire-bandit-00-09/</link>
      <pubDate>Sun, 15 Mar 2020 11:08:54 +0100</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/2020/200315-overthewire-bandit-00-09/</guid>
      <description>This week-end, I tried https://overthewire.org/wargames/bandit/ which is aimed at absolute beginners and teach the basics.
Bandit Level 0 Level Goal The goal of this level is for you to log into the game using SSH. The host to which you need to connect is bandit.labs.overthewire.org, on port 2220. The username is bandit0 and the password is bandit0. Once logged in, go to the Level 1 page to find out how to beat Level 1.</description>
    </item>
    
    <item>
      <title>24/7 CTF - The Secret Lock</title>
      <link>https://shiny-labs.re/posts/2020/200229-247ctf-the-secret-lock/</link>
      <pubDate>Sat, 29 Feb 2020 21:44:37 +0100</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/2020/200229-247ctf-the-secret-lock/</guid>
      <description>Description  Can you reverse the secret combination to open the lock and recover the flag?
 Solution The archive contains only one file named The Secret Lock.html&amp;hellip; Oh dear, a web page! Where&amp;rsquo;s my binary? :(((
On the HTML page, we are greeted by a impressive lock with a blinking &amp;ldquo;locked&amp;rdquo; message.
That&amp;rsquo;s some hardcore combination lock. Hope you don&amp;rsquo;t have one of those on your luggage&amp;hellip;
class Lock { constructor() { this.</description>
    </item>
    
    <item>
      <title>PicoCTF 2019 - General Skills</title>
      <link>https://shiny-labs.re/posts/2020/200223-picoctf-general-skills/</link>
      <pubDate>Sun, 23 Feb 2020 09:15:49 +0100</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/2020/200223-picoctf-general-skills/</guid>
      <description>Let&amp;rsquo;s Warm Up [50] Description  If I told you a word started with 0x70 in hexadecimal, what would it start with in ASCII?
 Solution A look at the ASCII manual should help!
$ man ascii Then, it&amp;rsquo;s just a matter of finding the right line, the one that has 70 in the Hex column.
Oct Dec Hex Char Oct Dec Hex Char â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ [...] 060 48 30 0 160 112 70 p Flag: picoCTF{p}</description>
    </item>
    
    <item>
      <title>24/7 CTF - The More The Merrier</title>
      <link>https://shiny-labs.re/posts/2020/200212-247ctf-the-more-the-merrier/</link>
      <pubDate>Wed, 12 Feb 2020 20:49:07 +0100</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/2020/200212-247ctf-the-more-the-merrier/</guid>
      <description>Description  One byte is great. But what if you need more? Can you find the flag hidden in this binary?
 Solution $ file the_more_the_merrier the_more_the_merrier: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 3.2.0, BuildID[sha1]=0f750d638337391328fa7432dd362189de908c1e, stripped $ ./the_more_the_merrier Nothing to see here.. Wow wow, calm down, I can&amp;rsquo;t follow with all the output! So&amp;hellip; Running the binary isn&amp;rsquo;t quite the definition of excitement&amp;hellip;</description>
    </item>
    
    <item>
      <title>Infosec Institute - n00bs CTF Labs Writeup</title>
      <link>https://shiny-labs.re/posts/2020/200201-infosecinstitute-n00bs-ctf-writeup/</link>
      <pubDate>Sat, 01 Feb 2020 14:42:01 +0100</pubDate>
      <author>shiny-labs@kylma.fr (shiny-labs)</author>
      <guid>https://shiny-labs.re/posts/2020/200201-infosecinstitute-n00bs-ctf-writeup/</guid>
      <description>_____ _____ _ _____ ___________ _ _ | _ || _ | | / __ \_ _| ___| | | | | _ __ | |/&amp;#39; || |/&amp;#39; | |__ ___ | / \/ | | | |_ | | __ _| |__ ___ | &amp;#39;_ \| /| || /| | &amp;#39;_ \/ __| | | | | | _| | | / _` | &amp;#39;_ \/ __| | | | \ |_/ /\ |_/ / |_) \__ \ | \__/\ | | | | | |___| (_| | |_) \__ \ |_| |_|\___/ \___/|_.</description>
    </item>
    
  </channel>
</rss>
